/* -*- c++ -*- */
/*
 * Copyright 2012 Dimitri Stolnikov <horiz0n@gmx.net>
 *
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <gnuradio/io_signature.h>
#include <gnuradio/blocks/null_source.h>
#include <gnuradio/blocks/throttle.h>
#include <gnuradio/constants.h>

#ifdef ENABLE_OSMOSDR
#include <osmosdr_src_c.h>
#endif

#ifdef ENABLE_FCD
#include <fcd_source_c.h>
#endif

#ifdef ENABLE_FILE
#include <file_source_c.h>
#endif

#ifdef ENABLE_RTL
#include <rtl_source_c.h>
#endif

#ifdef ENABLE_RTL_TCP
#include <rtl_tcp_source_c.h>
#endif

#ifdef ENABLE_UHD
#include <uhd_source_c.h>
#endif

#ifdef ENABLE_MIRI
#include <miri_source_c.h>
#endif

#ifdef ENABLE_SDRPLAY
#include <sdrplay_source_c.h>
#endif

#ifdef ENABLE_HACKRF
#include <hackrf_source_c.h>
#endif

#ifdef ENABLE_BLADERF
#include <bladerf_source_c.h>
#endif

#ifdef ENABLE_RFSPACE
#include <rfspace_source_c.h>
#endif

#ifdef ENABLE_AIRSPY
#include <airspy_source_c.h>
#endif

#ifdef ENABLE_SOAPY
#include <soapy_source_c.h>
#endif

#ifdef ENABLE_REDPITAYA
#include <redpitaya_source_c.h>
#endif

#ifdef ENABLE_FREESRP
#include <freesrp_source_c.h>
#endif

#include "arg_helpers.h"
#include "source_impl.h"

/*
 * Create a new instance of source_impl and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
osmosdr::source::sptr
osmosdr::source::make( const std::string &args )
{
  return gnuradio::get_initial_sptr( new source_impl(args) );
}

/*
 * The private constructor
 */
source_impl::source_impl( const std::string &args )
  : gr::hier_block2 ("source_impl",
        gr::io_signature::make(0, 0, 0),
        args_to_io_signature(args)),
    _manager(make_dev_manager(to_hier_block2()))
{
  size_t channel = 0;
  bool device_specified = false;

  message_port_register_hier_in( osmosdr::CMD_PORT );
  msg_connect( self(), osmosdr::CMD_PORT, _manager, osmosdr::CMD_PORT );

  std::vector< std::string > arg_list = args_to_vector(args);

  std::vector< std::string > dev_types;

#ifdef ENABLE_FILE
  dev_types.push_back("file");
#endif
#ifdef ENABLE_OSMOSDR
  dev_types.push_back("osmosdr");
#endif
#ifdef ENABLE_FCD
  dev_types.push_back("fcd");
#endif
#ifdef ENABLE_RTL
  dev_types.push_back("rtl");
#endif
#ifdef ENABLE_RTL_TCP
  dev_types.push_back("rtl_tcp");
#endif
#ifdef ENABLE_UHD
  dev_types.push_back("uhd");
#endif
#ifdef ENABLE_MIRI
  dev_types.push_back("miri");
#endif
#ifdef ENABLE_SDRPLAY
  dev_types.push_back("sdrplay");
#endif
#ifdef ENABLE_HACKRF
  dev_types.push_back("hackrf");
#endif
#ifdef ENABLE_BLADERF
  dev_types.push_back("bladerf");
#endif
#ifdef ENABLE_RFSPACE
  dev_types.push_back("rfspace");
#endif
#ifdef ENABLE_AIRSPY
  dev_types.push_back("airspy");
#endif
#ifdef ENABLE_SOAPY
  dev_types.push_back("soapy");
#endif
#ifdef ENABLE_REDPITAYA
  dev_types.push_back("redpitaya");
#endif
#ifdef ENABLE_FREESRP
  dev_types.push_back("freesrp");
#endif
  std::cerr << "gr-osmosdr "
            << GR_OSMOSDR_VERSION << " (" << GR_OSMOSDR_LIBVER << ") "
            << "gnuradio " << gr::version() << std::endl;
  std::cerr << "built-in source types: ";
  BOOST_FOREACH(std::string dev_type, dev_types)
    std::cerr << dev_type << " ";
  std::cerr << std::endl;

#ifdef ENABLE_RFSPACE
  dev_types.push_back("sdr-iq"); /* additional aliases for rfspace backend */
  dev_types.push_back("sdr-ip");
  dev_types.push_back("netsdr");
  dev_types.push_back("cloudiq");
#endif

  BOOST_FOREACH(std::string arg, arg_list) {
    dict_t dict = params_to_dict(arg);
    BOOST_FOREACH(std::string dev_type, dev_types) {
      if ( dict.count( dev_type ) ) {
        device_specified = true;
        break;
      }
    }
  }

  if ( ! device_specified ) {
    std::vector< std::string > dev_list;
#ifdef ENABLE_OSMOSDR
    BOOST_FOREACH( std::string dev, osmosdr_src_c::get_devices() )
      dev_list.push_back( dev );
#endif
#ifdef ENABLE_FCD
    BOOST_FOREACH( std::string dev, fcd_source_c::get_devices() )
      dev_list.push_back( dev );
#endif
#ifdef ENABLE_RTL
    BOOST_FOREACH( std::string dev, rtl_source_c::get_devices() )
      dev_list.push_back( dev );
#endif
#ifdef ENABLE_UHD
    BOOST_FOREACH( std::string dev, uhd_source_c::get_devices() )
      dev_list.push_back( dev );
#endif
#ifdef ENABLE_MIRI
    BOOST_FOREACH( std::string dev, miri_source_c::get_devices() )
      dev_list.push_back( dev );
#endif
#ifdef ENABLE_SDRPLAY
    BOOST_FOREACH( std::string dev, sdrplay_source_c::get_devices() )
      dev_list.push_back( dev );
#endif
#ifdef ENABLE_BLADERF
    BOOST_FOREACH( std::string dev, bladerf_source_c::get_devices() )
      dev_list.push_back( dev );
#endif
#ifdef ENABLE_RFSPACE
    BOOST_FOREACH( std::string dev, rfspace_source_c::get_devices() )
      dev_list.push_back( dev );
#endif
#ifdef ENABLE_HACKRF
    BOOST_FOREACH( std::string dev, hackrf_source_c::get_devices() )
      dev_list.push_back( dev );
#endif
#ifdef ENABLE_AIRSPY
    BOOST_FOREACH( std::string dev, airspy_source_c::get_devices() )
      dev_list.push_back( dev );
#endif
#ifdef ENABLE_SOAPY
    BOOST_FOREACH( std::string dev, soapy_source_c::get_devices() )
      dev_list.push_back( dev );
#endif
#ifdef ENABLE_REDPITAYA
    BOOST_FOREACH( std::string dev, redpitaya_source_c::get_devices() )
      dev_list.push_back( dev );
#endif
#ifdef ENABLE_FREESRP
    BOOST_FOREACH( std::string dev, freesrp_source_c::get_devices() )
      dev_list.push_back( dev );
#endif

//    std::cerr << std::endl;
//    BOOST_FOREACH( std::string dev, dev_list )
//      std::cerr << "'" << dev << "'" << std::endl;

    if ( dev_list.size() )
      arg_list.push_back( dev_list.front() );
    else
      throw std::runtime_error("No supported devices found (check the connection and/or udev rules).");
  }

  BOOST_FOREACH(std::string arg, arg_list) {

    dict_t dict = params_to_dict(arg);

//    std::cerr << std::endl;
//    BOOST_FOREACH( dict_t::value_type &entry, dict )
//      std::cerr << "'" << entry.first << "' = '" << entry.second << "'" << std::endl;

    source_iface *iface = NULL;
    gr::basic_block_sptr block;

#ifdef ENABLE_OSMOSDR
    if ( dict.count("osmosdr") ) {
      osmosdr_src_c_sptr src = osmosdr_make_src_c( arg );
      block = src; iface = src.get();
    }
#endif

#ifdef ENABLE_FCD
    if ( dict.count("fcd") ) {
      fcd_source_c_sptr src = make_fcd_source_c( arg );
      block = src; iface = src.get();
    }
#endif

#ifdef ENABLE_FILE
    if ( dict.count("file") ) {
      file_source_c_sptr src = make_file_source_c( arg );
      block = src; iface = src.get();
    }
#endif

#ifdef ENABLE_RTL
    if ( dict.count("rtl") ) {
      rtl_source_c_sptr src = make_rtl_source_c( arg );
      block = src; iface = src.get();
    }
#endif

#ifdef ENABLE_RTL_TCP
    if ( dict.count("rtl_tcp") ) {
      rtl_tcp_source_c_sptr src = make_rtl_tcp_source_c( arg );
      block = src; iface = src.get();
    }
#endif

#ifdef ENABLE_UHD
    if ( dict.count("uhd") ) {
      uhd_source_c_sptr src = make_uhd_source_c( arg );
      block = src; iface = src.get();
    }
#endif

#ifdef ENABLE_MIRI
    if ( dict.count("miri") ) {
      miri_source_c_sptr src = make_miri_source_c( arg );
      block = src; iface = src.get();
    }
#endif

#ifdef ENABLE_SDRPLAY
    if ( dict.count("sdrplay") ) {
      sdrplay_source_c_sptr src = make_sdrplay_source_c( arg );
      block = src; iface = src.get();
    }
#endif

#ifdef ENABLE_HACKRF
    if ( dict.count("hackrf") ) {
      hackrf_source_c_sptr src = make_hackrf_source_c( arg );
      block = src; iface = src.get();
    }
#endif

#ifdef ENABLE_BLADERF
    if ( dict.count("bladerf") ) {
      bladerf_source_c_sptr src = make_bladerf_source_c( arg );
      block = src; iface = src.get();
    }
#endif

#ifdef ENABLE_RFSPACE
    if ( dict.count("rfspace") ||
         dict.count("sdr-iq") ||
         dict.count("sdr-ip") ||
         dict.count("netsdr") ||
         dict.count("cloudiq") ) {
      rfspace_source_c_sptr src = make_rfspace_source_c( arg );
      block = src; iface = src.get();
    }
#endif

#ifdef ENABLE_AIRSPY
    if ( dict.count("airspy") ) {
      airspy_source_c_sptr src = make_airspy_source_c( arg );
      block = src; iface = src.get();
    }
#endif

#ifdef ENABLE_SOAPY
    if ( dict.count("soapy") ) {
      soapy_source_c_sptr src = make_soapy_source_c( arg );
      block = src; iface = src.get();
    }
#endif

#ifdef ENABLE_REDPITAYA
    if ( dict.count("redpitaya") ) {
      redpitaya_source_c_sptr src = make_redpitaya_source_c( arg );
      block = src; iface = src.get();
    }
#endif

#ifdef ENABLE_FREESRP
    if ( dict.count("freesrp") ) {
      freesrp_source_c_sptr src = make_freesrp_source_c( arg );
      block = src; iface = src.get();
    }
#endif

    _manager->add_device( block, iface );
  }

  if (!_manager->get_num_mboards())
    throw std::runtime_error("No devices specified via device arguments.");
}

size_t source_impl::get_num_channels()
{
  return _manager->get_num_channels();
}

bool source_impl::seek( long seek_point, int whence, size_t chan )
{
  return _manager->seek( seek_point, whence, chan );
}

osmosdr::meta_range_t source_impl::get_sample_rates()
{
  return _manager->get_sample_rates();
}

double source_impl::set_sample_rate( double rate )
{
  return _manager->set_sample_rate(rate);
}

double source_impl::get_sample_rate()
{
  return _manager->get_sample_rate();
}

osmosdr::freq_range_t source_impl::get_freq_range( size_t chan )
{
  return _manager->get_freq_range( chan );
}

double source_impl::set_center_freq( double freq, size_t chan )
{
  return _manager->set_center_freq( freq, chan );
}

double source_impl::get_center_freq( size_t chan )
{
  return _manager->get_center_freq( chan );
}

double source_impl::set_freq_corr( double ppm, size_t chan )
{
  return _manager->set_freq_corr( ppm, chan );
}

double source_impl::get_freq_corr( size_t chan )
{
  return _manager->get_freq_corr( chan );
}

std::vector<std::string> source_impl::get_gain_names( size_t chan )
{
  return _manager->get_gain_names( chan );
}

osmosdr::gain_range_t source_impl::get_gain_range( size_t chan )
{
  return _manager->get_gain_range( chan );
}

osmosdr::gain_range_t source_impl::get_gain_range( const std::string & name, size_t chan )
{
  return _manager->get_gain_range( name, chan );
}

bool source_impl::set_gain_mode( bool automatic, size_t chan )
{
  return _manager->set_gain_mode( automatic, chan );
}

bool source_impl::get_gain_mode( size_t chan )
{
  return _manager->get_gain_mode( chan );
}

double source_impl::set_gain( double gain, size_t chan )
{
  return _manager->set_gain( gain, chan );
}

double source_impl::set_gain( double gain, const std::string & name, size_t chan)
{
  return _manager->set_gain( gain, name, chan );
}

double source_impl::get_gain( size_t chan )
{
  return _manager->get_gain( chan );
}

double source_impl::get_gain( const std::string & name, size_t chan )
{
  return _manager->get_gain( name, chan );
}

double source_impl::set_if_gain( double gain, size_t chan )
{
  return _manager->set_if_gain( gain, chan );
}

double source_impl::set_bb_gain( double gain, size_t chan )
{
  return _manager->set_bb_gain( gain, chan );
}

std::vector< std::string > source_impl::get_antennas( size_t chan )
{
  return _manager->get_antennas( chan );
}

std::string source_impl::set_antenna( const std::string & antenna, size_t chan )
{
  return _manager->set_antenna( antenna, chan );
}

std::string source_impl::get_antenna( size_t chan )
{
  return _manager->get_antenna( chan );
}

void source_impl::set_dc_offset_mode( int mode, size_t chan )
{
  _manager->set_dc_offset_mode( mode, chan );
}

void source_impl::set_dc_offset( const std::complex<double> &offset, size_t chan )
{
  _manager->set_dc_offset( offset, chan );
}

void source_impl::set_iq_balance_mode( int mode, size_t chan )
{
  _manager->set_iq_balance_mode( mode, chan );
}

void source_impl::set_iq_balance( const std::complex<double> &balance, size_t chan )
{
  _manager->set_iq_balance( balance, chan );
}

double source_impl::set_bandwidth( double bandwidth, size_t chan )
{
  return _manager->set_bandwidth( bandwidth, chan );
}

double source_impl::get_bandwidth( size_t chan )
{
  return _manager->get_bandwidth( chan );
}

osmosdr::freq_range_t source_impl::get_bandwidth_range( size_t chan )
{
  return _manager->get_bandwidth_range( chan );
}

void source_impl::set_time_source(const std::string &source, const size_t mboard)
{
  return _manager->set_time_source( source, mboard );
}

std::string source_impl::get_time_source(const size_t mboard)
{
  return _manager->get_time_source( mboard );
}

std::vector<std::string> source_impl::get_time_sources(const size_t mboard)
{
  return _manager->get_time_sources( mboard );
}

void source_impl::set_clock_source(const std::string &source, const size_t mboard)
{
  return _manager->set_clock_source( source, mboard );
}

std::string source_impl::get_clock_source(const size_t mboard)
{
  return _manager->get_clock_source( mboard );
}

std::vector<std::string> source_impl::get_clock_sources(const size_t mboard)
{
  return _manager->get_clock_sources( mboard );
}

double source_impl::get_clock_rate(size_t mboard)
{
  return _manager->get_clock_rate( mboard );
}

void source_impl::set_clock_rate(double rate, size_t mboard)
{
  return _manager->set_clock_rate( rate, mboard );
}

osmosdr::time_spec_t source_impl::get_time_now(size_t mboard)
{
  return _manager->get_time_now( mboard );
}

osmosdr::time_spec_t source_impl::get_time_last_pps(size_t mboard)
{
  return _manager->get_time_last_pps( mboard );
}

void source_impl::set_time_now(const osmosdr::time_spec_t &time_spec, size_t mboard)
{
  return _manager->set_time_now( time_spec, mboard );
}

void source_impl::set_time_next_pps(const osmosdr::time_spec_t &time_spec)
{
  return _manager->set_time_next_pps( time_spec );
}

void source_impl::set_time_unknown_pps(const osmosdr::time_spec_t &time_spec)
{
  return _manager->set_time_unknown_pps( time_spec );
}
